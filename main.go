package main

import (
	"fmt"
	"log"
	"net/http"
	"net/url"
	"strings"

	"github.com/gofiber/fiber/v2"
)

func main() {
	app := fiber.New()

	app.Get("/", func(c *fiber.Ctx) error {
		return c.SendString("Hello, World!")
	})

	app.Post("/:bearer", func(c *fiber.Ctx) error {
		p := new(Content)
		bearer := c.Params("bearer")
		if err := c.BodyParser(p); err != nil {
			return err
		}

		log.Println("Text:", p.Text)
		log.Println("Check_id:", p.Check_id)
		log.Println("Check_name:", p.Check_name)
		log.Println("Check_url:", p.Check_url)
		log.Println("Request_location:", p.Request_location)
		log.Println("Request_datetime:", p.Request_datetime)
		log.Println("Request_timeout:", p.Request_timeout)
		log.Println("Response_state:", p.Response_state)
		log.Println("Response_status_code:", p.Response_status_code)
		log.Println("Response_time:", p.Response_time)
		log.Println("Response_summary:", p.Response_summary)

		message := fmt.Sprintf("\nName: %s\n", p.Text)
		message += fmt.Sprintf("Check_id: %s\n", p.Check_id)
		message += fmt.Sprintf("Check_name: %s\n", p.Check_name)
		message += fmt.Sprintf("Check_url: %s\n", p.Check_url)
		message += fmt.Sprintf("Request_location: %s\n", p.Request_location)
		message += fmt.Sprintf("Request_datetime: %s\n", p.Request_datetime)
		message += fmt.Sprintf("Request_timeout: %s\n", p.Request_timeout)
		message += fmt.Sprintf("Response_state: %s\n", p.Response_state)
		message += fmt.Sprintf("Response_status_code: %s\n", p.Response_status_code)
		message += fmt.Sprintf("Response_time: %s\n", p.Response_time)
		message += fmt.Sprintf("Response_summary: %s\n", p.Response_summary)

		notify(message, bearer)
		return c.JSON("Successed")

		// ...
	})
	//http.HandleFunc("/notify", notify(p))
	app.Listen(":3000")
}

func notify(p string, bearer string) {

	// Generated by curl-to-Go: https://mholt.github.io/curl-to-go

	// curl -X POST -H 'Authorization: Bearer WnyyUfgR91MfJ12Y5kew2yTmMDGwnspDL747FUTqbnO' -d 'message=foobar' https://notify-api.line.me/api/notify

	params := url.Values{}
	params.Add("message", p)
	body := strings.NewReader(params.Encode())

	req, err := http.NewRequest("POST", "https://notify-api.line.me/api/notify", body)
	if err != nil {
		// handle err
	}
	req.Header.Set("Authorization", "Bearer "+bearer)
	req.Header.Set("Content-Type", "application/x-www-form-urlencoded")

	resp, err := http.DefaultClient.Do(req)
	if err != nil {
		// handle err
	}
	defer resp.Body.Close()
}

// Field names should start with an uppercase letter
type Content struct {
	Text                 string `json:"text"`
	Check_id             string `json:"check_id"`
	Check_name           string `json:"check_name"`
	Check_url            string `json:"check_url"`
	Request_location     string `json:"request_location"`
	Request_datetime     string `json:"request_datetime"`
	Request_timeout      string `json:"request_timeout"`
	Response_state       string `json:"response_state"`
	Response_status_code string `json:"response_status_code"`
	Response_time        string `json:"response_time"`
	Response_summary     string `json:"response_summary"`
}
